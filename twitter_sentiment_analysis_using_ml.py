# -*- coding: utf-8 -*-
"""Twitter_Sentiment_Analysis_Using_ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L-JCZRgcIMWry7D88cqDnrmEhTguhvMk
"""

#https://youtu.be/4YGkfAd2iXM?si=w6piz80qvOeXMUff

pip install kaggle

#Configuring the path of Kaggle.json file
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

"""#Importing Twitter Sentiment Dataset"""

#Api to fetch the dataset from kaggle
!kaggle datasets download -d kazanova/sentiment140

#Extracting the compressed dataset
from zipfile import ZipFile
dataset = '/content/sentiment140.zip'
with ZipFile(dataset, 'r') as zip:
  zip.extractall()
  print("The Dataset Is extracted")

"""#Importing the Dependencies

"""

import numpy as np
import pandas as pd
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer  #Converting textual data into numerical format
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

#Print the stopwords in English
print(stopwords.words('english'))   #Doesnt add important meaning that can affect

"""#Data Processing"""

#Loading data from csv to pandas
twitter_data=pd.read_csv('/content/training.1600000.processed.noemoticon.csv',encoding ='ISO-8859-1')

twitter_data

# Checking the rows and columns
twitter_data.shape

#Printing the fist 5 rows on the dataframe
twitter_data.head(5)

#Naming the columns and reading the datasets again
column_names = ['target','id','date','flag','user','text']
twitter_data=pd.read_csv('/content/training.1600000.processed.noemoticon.csv', names=column_names, encoding ='ISO-8859-1')

#Printing the fist 5 rows of the dataframe
twitter_data.head()

#Checking the rows and no. of colunms
twitter_data.shape

twitter_data.isnull().sum()

#Checking the distribution of target column
twitter_data['target'].value_counts()

"""#Convert the target "4" to "1"
"""

twitter_data.replace({"target":{4:1}}, inplace= True)

#Checking the distribution of target column
twitter_data['target'].value_counts()

"""O -----> Negative Tweet

1 -----> Positive Tweet

#**STEMMING**
It is the process of reducing a word to its Root word

Example:actor,actress,acting=act
"""

port_stem = PorterStemmer()

def stemming(content):
  stemmed_content = re.sub('[^a-zA-Z]',' ',content)
  stemmed_content = stemmed_content.lower()
  stemmed_content = stemmed_content.split()
  stemmed_content = [port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content = ' '.join(stemmed_content)
  return stemmed_content

twitter_data['stemmed_content'] = twitter_data['text'].apply(stemming)           #55 minutes to complete this execution

twitter_data.head()

print(twitter_data['stemmed_content'])

print(twitter_data['target'])

#Separating the data and label
X = twitter_data['stemmed_content'].values
y =  twitter_data['target'].values

print(X)

print(y)

"""#Splitting the data into Training and Test Data"""

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,stratify=y,random_state=2)

print(X.shape, X_train.shape, X_test.shape)

print(X_test)

#Converting the textual data into numerical data

vectorizer = TfidfVectorizer()

X_train = vectorizer.fit_transform(X_train)
X_test = vectorizer.transform(X_test)

print(X_train)

print(X_test)

"""#Training the  ML Model"""

model = LogisticRegression(max_iter=1000)

model.fit(X_train,y_train)

"""#Model Evaluation
-Accuracy Score
"""

from sklearn.metrics import accuracy_score

# Assuming you have imported or defined your model earlier in the code
# model = YourModel()

def model_predict(X):
    return model.predict(X)

# Now you can use the model_predict function
X_train_prediction = model_predict(X_train)
training_data_accuracy = accuracy_score(y_train, X_train_prediction)

#Accuracy score on the training data
X_train_prediction = model_predict(X_train)
training_data_accuracy = accuracy_score(y_train, X_train_prediction)

print('Accuracy score on the training data =', training_data_accuracy)

"""#Saving the trained model"""

import pickle

filename = 'trained_model.sav'
pickle.dump(model, open(filename,'wb'))

"""#Using a saved model for future predictions"""

#Loading the save model
loaded_model = pickle.load(open('/content/trained_model.sav', 'rb'))

X_new = X_test[200]
print(y_test[200])

prediction = model.predict(X_new)
print(prediction)

if (prediction[0] == 0):
  print("Negative Tweet")
else:
  print("Positive Tweet")

X_new = X_test[3]
print(y_test[3])

prediction = model.predict(X_new)
print(prediction)

if (prediction[0] == 0):
  print("Negative Tweet")
else:
  print("Positive Tweet")





